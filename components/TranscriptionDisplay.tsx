

import React, { useRef, useEffect } from 'react';
import { TranscriptEntry, TranscriptSource } from '../types';
import { JournalIcon, MapPinIcon } from '../constants'; // Re-use journal icon for saving memory

// FIX: Manually add standard HTML element types to the global JSX namespace
// to resolve type errors caused by a misconfigured project setup.
declare global {
  namespace JSX {
    interface IntrinsicElements {
      div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
      img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;
      p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
      h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
      ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
      li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;
      a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
      span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
      button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
      svg: React.SVGProps<SVGSVGElement>;
      path: React.SVGProps<SVGPathElement>;
    }
  }
}

interface TranscriptionDisplayProps {
  transcripts: TranscriptEntry[];
  isReplying: boolean;
  isSpeaking: boolean;
  saveImageMemory: (entry: TranscriptEntry) => void;
}

const TranscriptBubble: React.FC<{ entry: TranscriptEntry; onSaveMemory: (entry: TranscriptEntry) => void; }> = ({ entry, onSaveMemory }) => {
  const isUser = entry.source === TranscriptSource.USER;
  const bubbleClass = isUser
    ? 'bg-neutral-700/90 self-end'
    : 'bg-neutral-800/80 self-start';
  const opacityClass = entry.isFinal ? 'opacity-100' : 'opacity-70';

  const hasContent = entry.text || entry.imageUrl || entry.attachment || (entry.searchResults && entry.searchResults.length > 0);

  if (!hasContent) return null;

  return (
    <div
      className={`relative group max-w-xs sm:max-w-md md:max-w-lg p-3 rounded-2xl transition-all duration-300 shadow-md flex flex-col gap-2 ${bubbleClass} ${opacityClass}`}
    >
      {entry.attachment?.dataUrl && (
         <img src={entry.attachment.dataUrl} alt={entry.attachment.name} className="rounded-lg max-h-48 w-auto object-contain self-center" />
      )}
      {entry.imageUrl && (
        <img src={entry.imageUrl} alt="Generated by Lily" className="rounded-lg max-h-64 w-auto object-contain self-center" />
      )}
      {entry.text && <p className="text-white text-sm sm:text-base whitespace-pre-wrap">{entry.text}</p>}
      
      {isUser && entry.attachment && (
        <button 
          onClick={() => onSaveMemory(entry)}
          className="absolute -left-2 -top-2 p-1.5 bg-purple-600 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity hover:bg-purple-500 shadow-lg"
          aria-label="Guardar este recuerdo"
          title="Guardar este recuerdo"
        >
          <JournalIcon />
        </button>
      )}

      {entry.searchResults && entry.searchResults.length > 0 && (
        <div className="mt-3 pt-3 border-t border-neutral-700/50">
          <h4 className="text-xs font-semibold text-purple-300 mb-2">Fuentes:</h4>
          <ul className="space-y-1.5">
            {entry.searchResults.map((result, index) => (
              <li key={index} className="flex items-center gap-2">
                 <span className="text-purple-400/80 flex-shrink-0">
                    {result.type === 'maps' ? <MapPinIcon /> : <>&#8226;</>}
                 </span>
                 <a
                  href={result.uri}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-sm text-gray-400 hover:text-purple-400 hover:underline truncate block"
                  title={result.title}
                >
                  {result.title}
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

const TypingIndicatorBubble: React.FC = () => (
    <div
      className={`max-w-xs sm:max-w-md md:max-w-lg p-3 rounded-2xl transition-all duration-300 shadow-md flex flex-col gap-2 bg-neutral-800/80 self-start`}
    >
      <div className="flex items-center space-x-1.5 h-5">
        <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse [animation-delay:-0.3s]"></div>
        <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse [animation-delay:-0.15s]"></div>
        <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>
      </div>
    </div>
  );

export const TranscriptionDisplay: React.FC<TranscriptionDisplayProps> = ({ transcripts, isReplying, isSpeaking, saveImageMemory }) => {
    const scrollRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        if (scrollRef.current) {
            scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
        }
    }, [transcripts, isReplying, isSpeaking]);

    const lastTranscript = transcripts[transcripts.length - 1];
    const isModelStreaming = lastTranscript?.source === TranscriptSource.MODEL && !lastTranscript.isFinal;
    const showTypingIndicator = isReplying && !isSpeaking && !isModelStreaming;

    return (
        <div 
          ref={scrollRef} 
          className="flex-grow p-4 space-y-4 overflow-y-auto pr-2"
          style={{ scrollbarWidth: 'thin', scrollbarColor: 'rgba(156, 163, 175, 0.5) transparent' }}
        >
            {transcripts.length === 0 && !showTypingIndicator ? (
                <div className="flex items-center justify-center h-full text-gray-400/90">
                    <p className="text-center text-sm">La transcripción del chat aparecerá aquí.</p>
                </div>
            ) : (
                <>
                    {transcripts.map((entry) => (
                        <div key={entry.id} className="flex flex-col">
                            <TranscriptBubble entry={entry} onSaveMemory={saveImageMemory} />
                        </div>
                    ))}
                    {showTypingIndicator && (
                        <div className="flex flex-col">
                            <TypingIndicatorBubble />
                        </div>
                    )}
                </>
            )}
        </div>
    );
};