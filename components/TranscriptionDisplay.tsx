import React, { useRef, useEffect } from 'react';
import { TranscriptEntry, TranscriptSource } from '../types';

interface TranscriptionDisplayProps {
  transcripts: TranscriptEntry[];
}

const TranscriptBubble: React.FC<{ entry: TranscriptEntry }> = ({ entry }) => {
  const isUser = entry.source === TranscriptSource.USER;
  const bubbleClass = isUser
    ? 'bg-neutral-700/90 self-end'
    : 'bg-neutral-800/80 self-start';
  const opacityClass = entry.isFinal ? 'opacity-100' : 'opacity-70';

  const hasContent = entry.text || entry.imageUrl || entry.attachment || (entry.searchResults && entry.searchResults.length > 0);

  if (!hasContent) return null;

  return (
    <div
      className={`max-w-xs sm:max-w-md md:max-w-lg p-3 rounded-2xl transition-all duration-300 shadow-md flex flex-col gap-2 ${bubbleClass} ${opacityClass}`}
    >
      {entry.attachment?.dataUrl && (
         <img src={entry.attachment.dataUrl} alt={entry.attachment.name} className="rounded-lg max-h-48 w-auto object-contain self-center" />
      )}
      {entry.imageUrl && (
        <img src={entry.imageUrl} alt="Generated by Lily" className="rounded-lg max-h-64 w-auto object-contain self-center" />
      )}
      {entry.text && <p className="text-white text-sm sm:text-base whitespace-pre-wrap">{entry.text}</p>}
      
      {/* Render search results */}
      {entry.searchResults && entry.searchResults.length > 0 && (
        <div className="mt-3 pt-3 border-t border-neutral-700/50">
          <h4 className="text-xs font-semibold text-purple-300 mb-2">Fuentes:</h4>
          <ul className="space-y-1.5">
            {entry.searchResults.map((result, index) => (
              <li key={index} className="flex items-center gap-2">
                 <span className="text-purple-400/80">&#8226;</span>
                 <a
                  href={result.uri}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-sm text-gray-400 hover:text-purple-400 hover:underline truncate block"
                  title={result.title}
                >
                  {result.title}
                </a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export const TranscriptionDisplay: React.FC<TranscriptionDisplayProps> = ({ transcripts }) => {
    const scrollRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        if (scrollRef.current) {
            scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
        }
    }, [transcripts]);

    return (
        <div 
          ref={scrollRef} 
          className="flex-grow p-4 space-y-4 overflow-y-auto pr-2"
          style={{ scrollbarWidth: 'thin', scrollbarColor: 'rgba(156, 163, 175, 0.5) transparent' }}
        >
            {transcripts.length === 0 ? (
                <div className="flex items-center justify-center h-full text-gray-400/90">
                    <p className="text-center text-sm">La transcripción del chat aparecerá aquí.</p>
                </div>
            ) : (
                transcripts.map((entry, index) => (
                    <div key={index} className="flex flex-col">
                        <TranscriptBubble entry={entry} />
                    </div>
                ))
            )}
        </div>
    );
};